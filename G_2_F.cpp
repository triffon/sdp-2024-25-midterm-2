/***********************************************************************
 * Моля, преименувате файла, като:
 *   - замените G с групата, с която ходите на упражнения
 *   - замените F с вашия факултетен номер
 **********************************************************************/

/***********************************************************************
 Задача 2. Дума наричаме последователност от малки и големи латински букви.
 Изречение наричаме низ, който представлява последователност от думи,
 разделени с точно един интервал. Да се реализира функция с минимална
 сложност по време bool permuteOrCommon(std::string const& s1,
 std::string const& s2, std::ostream& os), която проверява дали изречението
 s2 може да се получи с подходящо разместване на думите в изречението s1.
 Ако отговорът е „не", функцията да извежда на потока os думите, които
 се срещат и в двете изречения, разделени с интервал.
 Каква е сложността на решението ви?
 Пример: permuteOrCommon("Merry Christmas and Happy New Year",
                        "Happy New Year and Merry Christmas", std::cout) → true
 permuteOrCommon("Jingle bells jingle bells",
                 "bells jingle all the way", std::cout) → jingle bells
************************************************************************/

#include <iostream>

/***********************************************************************
 РЕШЕНИЕ:
************************************************************************/

bool permuteOrCommon(std::string const& s1, std::string const& s2, std::ostream& os);

/***********************************************************************
 КРАЙ НА РЕШЕНИЕТО
************************************************************************/

#define DOCTEST_CONFIG_IMPLEMENT
#include "doctest.h"

/***********************************************************************
  РАЗКОМЕНТИРАЙТЕ СЛЕДВАЩИЯ РЕД, ЗА ДА ВКЛЮЧИТЕ ТЕСТОВЕТЕ
************************************************************************/
//#include "2_tests.hpp"

int main() {
    // пускане на тестовете
    doctest::Context().run();
    return 0;
}
